I"<h1 id="assignment-and-compound-assignment-operators">Assignment and Compound Assignment Operators</h1>

<ul>
  <li>Assignment Operator 
The assignment operator is used to save a value in the variable.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/assignment-op.png" alt="" /></p>

<h1 id="type">Type</h1>
<p>Rust has only one assignment operator, = . The following table defines the function of the operator.</p>

<table>
  <thead>
    <tr>
      <th>operator</th>
      <th>operation</th>
      <th>explanation</th>
      <th>example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>operand1 = operand2</td>
      <td>assign a value</td>
      <td>assign a value of operand 2  to operand 1</td>
      <td>a = 1<br />b = a</td>
    </tr>
  </tbody>
</table>

<p>The following example demonstrates the use of some of the assignment operator in a program:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
   let a = 2;
   let b = a;
   println!("b = a");
   println!("Value of a:{}", a);
   println!("Value of b:{}", b);
}

</code></pre></div></div>
<p>output:-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>b = a
Value of a:2
Value of b:2

</code></pre></div></div>
<h1 id="compound-assignment-operator">Compound Assignment Operator</h1>

<p>The compound assignment operator is used to perform an operation and then assign that value to the operand.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/Compound-op.png" alt="" /></p>

<h1 id="types">Types</h1>

<p>The following table summarizes the types of compound assignment operators</p>

<table>
  <thead>
    <tr>
      <th>operator</th>
      <th>operation</th>
      <th>explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>operand1 += operand2<br /><br />operand1 -= operand2</td>
      <td>add a value and assign<br /><br />subtract a value and assign</td>
      <td>add left-hand side to right-hand side and then save updated value to left operand<br /><br />add right-hand side to right-hand side and then save updated value to left operand</td>
    </tr>
    <tr>
      <td>operand1 /= operand2<br /><br />operand1 *= operand2</td>
      <td>divide a value and assign<br /><br />multiple a value and assign</td>
      <td>divide left-hand side to right-hand side and then save updated value to left operand<br /><br />multiply left-hand side to right-hand side and then save updated value to left operand</td>
    </tr>
    <tr>
      <td>operand1 %= operand2</td>
      <td>modulus and assign</td>
      <td>take modulus of the left-hand side with right-hand operand and then save updated value to left operand</td>
    </tr>
    <tr>
      <td>operand1 &amp;= operand2</td>
      <td>Bitwise AND and assign</td>
      <td>Bitwise AND  of the left-hand side with right-hand operand and then save updated value to left operand</td>
    </tr>
    <tr>
      <td>operand1 |= operand2</td>
      <td>Bitwise OR and assign</td>
      <td>Bitwise OR  of the left-hand side with right-hand operand and then save updated value to left operand</td>
    </tr>
    <tr>
      <td>operand1 ^= operand2</td>
      <td>Bitwise XOR and assign</td>
      <td>Bitwise XOR  of the left-hand side with right-hand operand and then save updated value to left operand</td>
    </tr>
    <tr>
      <td>«= operand1</td>
      <td>left sift and assign</td>
      <td>left shift the operand x times then save updated value to operand</td>
    </tr>
    <tr>
      <td>»= operand1</td>
      <td>right shift and assign</td>
      <td>right shift the operand x times then save updated value to operand</td>
    </tr>
  </tbody>
</table>

<p>The following example demonstrates the use of some of these operators in a program:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
fn main() {
    //define a mutable variable
    let mut a = 2;
    println!("a:{}", a);
    a += 1;
    println!("a+=1:{}", a);
    println!("a:{}", a);
    a -= 1;
    println!("a-=1:{}", a);
    println!("a:{}", a);
    a /= 1;
    println!("a/=1:{}", a);
    println!("a:{}", a);
    a *= 3;
    println!("a/=3:{}", a);
}



</code></pre></div></div>
<p>output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a:2
a+=1:3
a:3
a-=1:2
a:2
a/=1:2
a:2
a/=3:6

</code></pre></div></div>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of the assignment and compound assignment operators in Rust.</p>

<ol>
  <li>What is the output of the following code?</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
  let mut a = 2;
  let mut b = 3;
  a += a;
  b -= b;
  a *= 1;
  b *= 3;
  a -= 1;
  println!("a: {}", a);
  println!("b: {}", b); 
}


</code></pre></div></div>
<p>A) a: 3 <br /> 
   b: 0 <br /> 
B) a: 0 <br /> 
   b: 3 <br /> 
C) a: 2 <br /> 
   b: 0 <br /> 
D) a: 4 <br /> 
   b: 3 <br /></p>

:ET