I"è<h1 id="what-are-static-methods">What Are Static Methods?</h1>
<ul>
  <li>Static methods are the ones that can be invoked without instantiating the struct.</li>
</ul>

<h1 id="declare-a-static-method">Declare a Static Method</h1>

<p>The following illustration explains how to declare a static method within the impl construct.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/static-method.png" alt="" /></p>

<p>Note: If the construct is declared with an impl keyword, it must have one or both types of methods, static or non-static.</p>

<h1 id="invoke-a-static-method">Invoke a Static Method</h1>

<p>A static method can be invoked by following the struct name with the membership operator:: followed by the method name :
<img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/call-method.png" alt="" /></p>

<h1 id="example">Example</h1>

<p>The following example creates a static method <code class="language-plaintext highlighter-rouge">my_static_method</code> and invokes it from the main function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// declare a struct

struct Course {

   name: String,

   level:String,

   code: i32,

}

impl Course {

   // static method

   fn my_static_method(n: String, l: String, c:i32) -&gt; Course {

      Course { 

      name: n, 

      level:l,

      code:c

       }

   }

   //display

   fn display(&amp;self){

      println!("name :{} code:{} of type: {}", self.name, self.code, self.level );

   }

}

fn main(){

   // call the static method

   let c1 = Course::my_static_method("Rust".to_string(), "beginner".to_string(), 132);

   c1.display();

}

</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name :Rust code:132 of type: beginner

</code></pre></div></div>

:ET