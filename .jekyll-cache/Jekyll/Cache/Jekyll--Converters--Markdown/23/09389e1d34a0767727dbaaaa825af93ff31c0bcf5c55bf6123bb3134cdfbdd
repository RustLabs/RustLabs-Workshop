I"&<h1 id="introduction-to-structs">Introduction to Structs</h1>

<h1 id="what-are-structs">What Are Structs?</h1>

<ul>
  <li>Structs consist of related items that potentially have different data types.</li>
  <li>Structs are similar to tuples in this regard. However, unlike tuples, you must define the data type of the item within the struct</li>
  <li>Structs help to create custom data types.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/struct_intro.png" alt="" /></p>

<ul>
  <li>Let’s consider a real life example. You know that a rectangle has two measurements, width and height. Suppose you have several 
rectangles which you can name. Once you have declared a rectangle items within the struct, you can initialize the values according to the type of rectangle. 
Suppose the dimensions of a rectangle may vary according to the color of the rectangle.</li>
</ul>

<h1 id="declare-a-struct">Declare a Struct</h1>

<p>Structs are declared using a struct keyword followed by the name of the struct and then the body of the struct enclosed within curly braces. 
Within the body, the items of the struct aredefined as a key: value pair where keys are the items of the struct and value is the data type of each item.</p>

<p>Note: The struct construct can be declared anywhere, above or below the function that initializes it.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/struct_syntax.png" alt="" /></p>

<ul>
  <li>
    <p>Naming Convention:</p>

    <ul>
      <li>The name of the struct should be in PascalCase, meaning, the first letter of each word in a compound word is capitalized.</li>
      <li>If this case is not followed, a warning, ⚠️, is generated by the compiler.</li>
    </ul>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/init_struct.png" alt="" /></p>

<p>Note: The order in which you assign values to items does not matter.</p>

<h1 id="access-values-from-a-struct">Access Values from a Struct</h1>

<p>To access any value from the struct write the struct name followed by the . operator and then the name of the item to be accessed.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/access_value.png" alt="" /></p>

<p>Note: A struct instance is immutable by default. Therefore it cannot be updated unless made mutable. However, the values can be accessed.</p>

<h1 id="update-a-struct-instance">Update a Struct Instance</h1>

<p>A struct instance can be made mutable by adding a mut keyword after the let followed by the instantiation of the struct. 
Now that the struct instance is mutable, any item can be accessed using the dot operator and the value of the item can be updated.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/update_struct.png" alt="" /></p>

<ul>
  <li>Example</li>
</ul>

<p>The following example creates a struct named Course and defines three items of it: course name, course level, and course code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//declare a struct
struct Course {
   code:i32,
   name:String,
   level:String, 
}

fn main() {
   //initialize
   let mut course1 = Course  {
      name:String::from("Rust"),
      level:String::from("beginner"),
      code:130,
   };
   let course2 = Course  {
      name:String::from("Javascript"),
      level:String::from("beginner"),
      code:122,
   };
   //access
   println!("Name:{}, Level:{}, code: {}", course1.name, course1.level, course1.code);
   println!("Name:{}, Level:{}, code: {}", course2.name, course2.level, course2.code); 
   //update
   course1.name = "Java".to_string();
   course1.code = 134;
   println!("Name:{}, Level:{} ,code: {}", course1.name, course1.level, course1.code);
}


</code></pre></div></div>
<p>output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Name:Rust, Level:beginner, code: 130
Name:Javascript, Level:beginner, code: 122
Name:Java, Level:beginner ,code: 134


</code></pre></div></div>
<h1 id="quiz">Quiz</h1>

<p>Test your understanding of the basics of structs</p>

<ol>
  <li>The values of struct can be accessed through a: <br /></li>
</ol>

<p>A) <code class="language-plaintext highlighter-rouge">.</code> dot operator <br />
B) <code class="language-plaintext highlighter-rouge">[]</code> subscript notation <br /></p>

<ol>
  <li>the name of the struct should be in which case to avoid compiler warning? <br /></li>
</ol>

<p>A) PascalCase <br />
 B) snake_case <br /></p>

:ET