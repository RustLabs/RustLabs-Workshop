I"„<h1 id="solution-3---find-nth-fibonacci-number">Solution 3 - Find nth Fibonacci Number</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn fibonacci(term: i32) -&gt; i32 {
    match term {
        0 =&gt;  0,
        1 =&gt;  1,
        _ =&gt; fibonacci(term-1) + fibonacci(term-2),
    }
}
fn main(){
    println!("fibonacci(4)={}",fibonacci(4));
}



</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fibonacci(4)=3

</code></pre></div></div>
<h1 id="explanation">Explanation</h1>

<p>A recursive function, fibonacci, takes a parameter term of type i32 and returns an integer of type i32, i.e., the nth term of the Fibonacci number.</p>

<p>The recursive function has two parts: the base case, and the recursive case.</p>
<ul>
  <li>base case
    <ul>
      <li>match takes the term and if it matches with 0 it returns 0 and if it matches with 1 it returns 1</li>
    </ul>
  </li>
  <li>recursive case
    <ul>
      <li>It decrements the value of the term by 1. A recursive call is made with argument term - 1 or term - 2 and that the function execution canâ€™t proceed until the recursive calls return. Now the answer before the + operator is calculated.</li>
      <li>It then decrements the value of the term by 2. A recursive call is made with argument term - 1 or term - 2 and that the function execution canâ€™t proceed until the recursive calls return. Now the answer after the + operator is calculated.</li>
      <li>It simply adds the two values and returns the result.</li>
    </ul>
  </li>
</ul>

:ET