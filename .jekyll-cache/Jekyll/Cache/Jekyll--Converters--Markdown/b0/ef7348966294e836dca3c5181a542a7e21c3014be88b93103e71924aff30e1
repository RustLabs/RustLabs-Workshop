I"í<h1 id="challenge-check-if-the-person-has-a-driving-license">Challenge: Check If the Person Has a Driving License</h1>

<h1 id="problem-statement">Problem Statement</h1>
<ul>
  <li>A struct Car and Motorbike is provided to you.</li>
  <li>A trait Drive is provided to you which has an abstract method can_drive.</li>
</ul>

<h1 id="the-task-is-to">The task is to</h1>
<ul>
  <li>implement method <code class="language-plaintext highlighter-rouge">can_drive</code> for Car</li>
  <li>implement method <code class="language-plaintext highlighter-rouge">can_drive</code> for Motorbike</li>
</ul>

<h1 id="output">Output</h1>

<p>The output should be <code class="language-plaintext highlighter-rouge">0 </code> or <code class="language-plaintext highlighter-rouge">1</code> based on whether a person can drive or not.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 or 0
</code></pre></div></div>

<h1 id="coding-exercise">Coding Exercise</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#![allow(dead_code)] 
//declare a structure
struct Car {
   owner_age:i32,
}
struct Motorbike {
   owner_age:i32,
}
//declare a trait
trait Drive {
   fn can_drive(&amp;self)-&gt;i32;
}
//implement the trait
impl Drive for Car{
   fn can_drive(&amp;self)-&gt;i32{
      -1
   }
}
impl Drive for Motorbike{
   fn can_drive(&amp;self)-&gt;i32{
      -1
   }
}
 


</code></pre></div></div>
<p>Good luck!ðŸ¤ž</p>

:ET