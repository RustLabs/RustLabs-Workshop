I"8<h1 id="arrays">Arrays</h1>

<ul>
  <li>What Is an Array?</li>
</ul>

<p>An array is a homogenous sequence of elements. Being a compound type, it is used when the collection of values of the same type are to be stored in a 
single variable. In Rust, an array can only be of a fixed length. Like all other languages, each element in the array is assigned an index. By default, 
the first element is always at index 0.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/array-size.png" alt="" /></p>

<p>Note: By default, arrays are immutable.</p>

<h1 id="define-an-array">Define an Array</h1>

<p>To define an array in Rust, we have to define the type and size of the array. To initialize an array, the array elements are enclosed in square brackets <code class="language-plaintext highlighter-rouge">[]</code>.
 The following illustration explains the concept:</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/array-syntax.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#[allow(unused_variables, unused_mut)]
fn main() {
   //define an array of size 4
   let arr:[i32;4] = [1, 2, 3, 4]; 
   // initialize an array of size 4 with 0
   let arr1 = [0 ; 4]; 
}

</code></pre></div></div>

<ul>
  <li>The array arr declaration on line 4 declares an array with elements 1,2,3,4.</li>
  <li>The array arr1 declaration on line 6 implicitly determines the data type (integer) from the value 0 and 4, is the size of the array. 
  So, this becomes an array consisting of 4 zeros.</li>
</ul>

<p># Access an Element of an Array</p>

<ul>
  <li>Any value of the array can be accessed by writing the array name followed by the index number enclosed within square brackets <code class="language-plaintext highlighter-rouge">[ ]</code>.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
   //define an array of size 4
   let arr:[i32;4] = [1, 2, 3, 4]; 
   //print the first element of array
   println!("The first value of array is {}", arr[0]);
   // initialize an array of size 4 with 0
   let arr1 = [0; 4]; 
   //print the first element of array
   println!("The first value of array is {}", arr1[0]);
}



</code></pre></div></div>

<p>Output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The first value of array is 1
The first value of array is 0
</code></pre></div></div>

<h1 id="how-to-make-an-array-mutable">How to Make an Array Mutable?</h1>

<p>Just like a variable becomes mutable by adding the mut keyword after let, the same goes for an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    //define a mutable array of size 4
    let mut arr:[i32;4] = [1, 2, 3, 4]; 
    println!("The value of array at index 1: {}", arr[1]);
    arr[1] = 9;
    println!("The value of array at index 1: {}", arr[1]);
}

</code></pre></div></div>
<p>Output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The value of array at index 1: 2
The value of array at index 1: 9
</code></pre></div></div>

<h1 id="print-the-array">Print the Array</h1>

<p>The whole array can be traversed using a loop or the debug trait.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    //define an array of size 4
    let arr:[i32;4] = [1, 2, 3, 4]; 
    //Using debug trait
    println!("\nPrint using a debug trait");
    println!("Array: {:?}", arr);
}



</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Print using a debug trait
Array: [1, 2, 3, 4]

</code></pre></div></div>

<h1 id="get-the-length-of-the-array">Get the Length of the Array</h1>

<p>To access the length of the array, use the built-in function len.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    //define an array of size 4
    let arr:[i32;4] = [1, 2, 3, 4]; 
    // print the length of array
    println!("Length of array: {}", arr.len());
}

</code></pre></div></div>

<h1 id="get-slice">Get Slice</h1>

<p>Slice is basically a portion of an array. It lets you refer to a subset of a contiguous memory location. But unlike an array, the size of the slice is not known at compile time.</p>

<ul>
  <li>Syntax
    <ul>
      <li>A slice is a two-word object, the first word is a data pointer and the second word is a slice length.</li>
      <li>Data pointer is a programming language object that points to the memory location of the data, i.e., it stores the memory address of the data.</li>
      <li>To declare an array slice, we need to specify the name of the source array and the range of elements to be included in the slice.</li>
    </ul>
  </li>
</ul>

<p>Note: If the range of elements is not specified, it will consider the whole array as a slice.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/slice-syntax.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> fn main() {
    //define an array of size 4
    let arr:[i32;4] = [1, 2, 3, 4]; 
    //define the slice
    let slice_array1:&amp;[i32] = &amp;arr;
    let slice_array2:&amp;[i32] = &amp;arr[0..2];
    // print the slice of an array
    println!("Slice of an array: {:?}", slice_array1);
    println!("Slice of an array: {:?}", slice_array2);
}
 
 
</code></pre></div></div>

<p>output :-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Slice of an array: [1, 2, 3, 4]
Slice of an array: [1, 2]
</code></pre></div></div>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding on arrays in Rust! <br /></p>

<ol>
  <li>
    <p>How can you define an array in rust? <br />
a) <code class="language-plaintext highlighter-rouge">let arr: [i32;4] = [1,2,3,4];</code> <br />
b) <code class="language-plaintext highlighter-rouge">let arr: [i32:4] = [1,2,3,4];</code> <br /></p>
  </li>
  <li>
    <p>What is the output of the following code? <br />
a) Slice of an array : [1, 2] <br />
b) Slice of an array : [1] <br /></p>
  </li>
</ol>

:ET