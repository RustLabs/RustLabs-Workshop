I"W<h1 id="break-statement">Break Statement</h1>

<h1 id="what-is-a-break-statement">What Is a <code class="language-plaintext highlighter-rouge">break </code>Statement?</h1>

<p>The break statement terminates the loop. It is generally placed inside a conditional statement so that the loop terminates if the associated condition is true.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/break_flow.png" alt="" /></p>

<p>Break statement is valid in case of while, for and loop.</p>
<h1 id="using-with-a-for-loop">Using With a for Loop</h1>

<p>Below is an example of break expression, using a for loop.</p>
<ul>
  <li>The range defined in the for loop is from 0 to 10.</li>
  <li>Within the for loop :
    <ul>
      <li>The value of <code class="language-plaintext highlighter-rouge">i </code> is printed</li>
      <li>When the value of ` i ` is equal to ` 5 `, the loop terminates</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
  // define a for loop
  for i in 0..10 {
    println!("i:{}", i);
    if i == 5 {
      break;
    }
  }
}
</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i:0
i:1
i:2
i:3
i:4
i:5

</code></pre></div></div>

<h1 id="using-with-a-while-loop">Using With a while Loop</h1>

<p>Below is an example of break expression, using a while loop.</p>
<ul>
  <li>A mutable variable i is defined</li>
  <li>A boolean variable found is defined
  Within the while loop body :
    <ul>
      <li>The value of i is printed</li>
      <li>When the value of <code class="language-plaintext highlighter-rouge">i</code> is equal to<code class="language-plaintext highlighter-rouge"> 5</code>, the loop terminates</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
  let mut i = 1;
  let found = false;
  // define a while loop
  while !found {
    println!("i:{}", i);
    if i == 5 {
      break;
    }
    i = i + 1;    
  }
}



</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i:1
i:2
i:3
i:4
i:5

</code></pre></div></div>

<h1 id="using-with-a-loop">Using With a loop</h1>

<p>Below is an example of break expression, using a loop.</p>
<ul>
  <li>A mutable variable i is defined</li>
  <li>Within the loop body:
    <ul>
      <li>The value of i is printed</li>
      <li>When the value of <code class="language-plaintext highlighter-rouge">i </code> is equal to ` 4 `, the loop terminates</li>
    </ul>
  </li>
</ul>

<p>The infinite loop is turned into a ‚Äúmanageable‚Äù loop.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> fn main() {
  let mut i = 1;
  // define a loop
  loop{
    println!("i:{}", i);
    if i == 5 {
      break;
    }
    i = i + 1;    
  }
}
 
</code></pre></div></div>
<p>Output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i:1
i:2
i:3
i:4
i:5

</code></pre></div></div>

<h1 id="quiz">Quiz</h1>
<p>Test your understanding of how break statement works in Rust.</p>

<ol>
  <li>How many times does the print statement in the loop run?</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
  for i in 0..10 {
    println!("i:{}", i);
    if i == 5 {
      break;
    }
  }
}


</code></pre></div></div>
<p>A) 5
B) 6
C) 7</p>

:ET