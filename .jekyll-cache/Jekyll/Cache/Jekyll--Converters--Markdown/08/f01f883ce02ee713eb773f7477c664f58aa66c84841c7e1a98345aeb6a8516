I"™<h1 id="precedence-and-associativity">Precedence and Associativity</h1>

<h1 id="precedence">Precedence</h1>

<p>The precedence of an operator determines which operation is performed first in an expression with more than one operators.</p>

<p>Operators are listed below in the order of their precedence from highest to lowest :</p>

<ul>
  <li>Unary
    <ul>
      <li>Logical/Bitwise NOT - <code class="language-plaintext highlighter-rouge">!</code></li>
      <li>Derereference - <code class="language-plaintext highlighter-rouge">*</code></li>
      <li>Borrow - <code class="language-plaintext highlighter-rouge">&amp;</code>, <code class="language-plaintext highlighter-rouge">&amp;mut</code></li>
    </ul>
  </li>
  <li>Binary
    <ul>
      <li>Typecast - <code class="language-plaintext highlighter-rouge">as</code></li>
      <li>Multiplication- <code class="language-plaintext highlighter-rouge">*</code>,Division - <code class="language-plaintext highlighter-rouge">/</code>,Remainder- <code class="language-plaintext highlighter-rouge">%</code></li>
      <li>Addition - <code class="language-plaintext highlighter-rouge">+</code>, Subtraction -<code class="language-plaintext highlighter-rouge"> -</code></li>
      <li>Left Shift - <code class="language-plaintext highlighter-rouge">&lt;&lt;</code>, Right Shift - <code class="language-plaintext highlighter-rouge">&gt;&gt;</code></li>
      <li>Bitwise AND - <code class="language-plaintext highlighter-rouge">&amp;</code></li>
      <li>Bitwise XOR - <code class="language-plaintext highlighter-rouge">^</code></li>
      <li>Bitwise OR - <code class="language-plaintext highlighter-rouge">|</code></li>
      <li>Comparison - <code class="language-plaintext highlighter-rouge">==</code> <code class="language-plaintext highlighter-rouge">!=</code> <code class="language-plaintext highlighter-rouge">&lt;</code><code class="language-plaintext highlighter-rouge"> &gt;</code> <code class="language-plaintext highlighter-rouge">&lt;= </code><code class="language-plaintext highlighter-rouge">&gt;=</code></li>
      <li>Logical AND - <code class="language-plaintext highlighter-rouge">&amp;&amp;</code></li>
      <li>Logical OR - <code class="language-plaintext highlighter-rouge">||</code></li>
      <li>Range - <code class="language-plaintext highlighter-rouge">start .. stop</code></li>
      <li>Assignment/Compound Assignment - <code class="language-plaintext highlighter-rouge">= += -= *= /= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=</code></li>
    </ul>
  </li>
</ul>

<p>Note: The operators that are written in the same row have the same order of precedence.</p>

<h1 id="associativity">Associativity</h1>

<p>If two or more operators of the same precedence appear in a statement, then which operator will be evaluated first is defined by the associativity.</p>

<h1 id="left-to-right-associativity">Left to Right Associativity</h1>

<p>Left associativity occurs when an expression is evaluated from left to right. An expression such as<code class="language-plaintext highlighter-rouge"> a ~ b ~ c</code>, in this case, would be interpreted as 
<code class="language-plaintext highlighter-rouge">(a ~ b) ~ c</code> where <code class="language-plaintext highlighter-rouge">~ </code>can be any operator.
The operators below can be chained as left associative.</p>

<p>üìùThe comparison, assignment, and the range operator cannot be chained at all.</p>

<h1 id="example-1">Example 1</h1>

<p>The example below solves an expression according to its operator precedence:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    println!("Answer : {}",( 3 + 5 ) * 9 / 7 &amp; 8);
}

</code></pre></div></div>
<p>output:-</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Answer : 8

</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/precedence-ex1.png" alt="" /></p>

<h1 id="example-2">Example 2</h1>

<p>The example below solves an expression according to its operator precedence:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn test() {
    println!("{}", 2 + 3 / 5 ^ 7 &amp; 8 | 9);
}

</code></pre></div></div>
<p>output:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>11

</code></pre></div></div>
<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/precedence-ex2.png" alt="" /></p>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of operator precedence in Rust!</p>

<ol>
  <li>What is the output of the following code according to its operator precedence in Rust? <br /></li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    println!("{}", 3 + 4 - 9 / 6 * 6 ^ 8 &amp; 3);
}


</code></pre></div></div>
<p>A) 1 <br />
B) 2 <br />
C) 3 <br />
D) 4 <br /></p>

:ET