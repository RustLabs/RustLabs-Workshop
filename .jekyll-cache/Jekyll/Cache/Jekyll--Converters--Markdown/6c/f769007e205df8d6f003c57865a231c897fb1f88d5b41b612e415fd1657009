I"√0<h1 id="introduction-to-vectors">Introduction to Vectors</h1>

<ul>
  <li>What are Vectors?</li>
</ul>

<p>Vectors are resizable arrays meaning(they can grow or shrink in size).</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/shrink-grow-vec.png" alt="" /></p>

<h1 id="create-vectors">Create Vectors</h1>
<ul>
  <li>
    <p>There are two ways to create a vector:</p>
  </li>
  <li>
    <p>Syntax</p>
    <ul>
      <li>To create a vector write the vector macro <code class="language-plaintext highlighter-rouge">(vec!)</code> followed by the elements of the vector enclosed in square brackets</li>
    </ul>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/vector_syntax.png" alt="" /></p>

<p>It is optional to define the type and size of the vector enclosed within angular brackets. 
Use the vector macro<code class="language-plaintext highlighter-rouge">(vec!)</code> before defining the elements of the vector.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/vector_syntax-1.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
   //define a vector of size 4
   let my_vec = vec![1, 2, 3, 4, 5];
   //print the vector
   println!("{:?}", my_vec);
}

</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 2, 3, 4, 5]

</code></pre></div></div>

<p>Note: Like arrays can be displayed on the screen using the println!() macro.</p>

<h1 id="access-an-element-of-a-vector">Access an Element of a Vector</h1>

<ul>
  <li>Any value of the vector can be accessed by writing the vector name followed by the index number enclosed within square brackets <code class="language-plaintext highlighter-rouge">[ ]</code>.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
   //define a vector of size 4
   let my_vec = vec![1, 2, 3, 4, 5];
   //access a particular value
   println!("{}", my_vec[0]);
}
</code></pre></div></div>
<p>output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
</code></pre></div></div>
<p>Note: If you try to access an index that does not exist, the compiler will give out of bound access error, ‚ùå.</p>

<p>This is illustrated in the code below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
   //define a vector of size 4
   let my_vec = vec![1, 2, 3, 4, 5];
   //access a particular value
   eprintln!("{}", my_vec[9]);
}


</code></pre></div></div>
<p>output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 9', /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/slice/mod.rs:2796:10
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.

    
</code></pre></div></div>

<p>To cater to out of bound exceptions, you can use a None keyword.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    let my_vec = vec![1, 2, 3,4,5];
    match my_vec.get(9) {
        Some(x) =&gt; println!("Value at given index:{}", x),
        None =&gt; println!("Sorry, you are accessing a value out of bound")
    }
}


</code></pre></div></div>
<p>output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sorry, you are accessing a value out of bound

</code></pre></div></div>
<h1 id="print-the-vector">Print the Vector</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {   
    println!("Print using debug trait");   
    let my_vec = vec![1, 2, 3,4,5];
    //using debug trait 
    println!("Vector : {:?}", my_vec);
    println!("Print using for loop"); 
    // using loop
    let mut index = 0;
    for i in my_vec {
        println!("Element at index {}:{} ", index, i);
        index = index+1;
    }
}


</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Print using debug trait
Vector : [1, 2, 3, 4, 5]
Print using for loop
Element at index 0:1 
Element at index 1:2 
Element at index 2:3 
Element at index 3:4 
Element at index 4:5 

</code></pre></div></div>

<h1 id="methods-of-vectors">Methods of Vectors</h1>
<p>The methods of vectors are summarized in the chart below:</p>

<table>
  <thead>
    <tr>
      <th>#</th>
      <th>method</th>
      <th>explaination</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><br /><br />1</td>
      <td>Vec::new()</td>
      <td>creates a new vector<br /><br /><br /></td>
    </tr>
    <tr>
      <td>2</td>
      <td>.push()</td>
      <td>push a value</td>
    </tr>
    <tr>
      <td>3</td>
      <td>.pop()</td>
      <td>pop a value</td>
    </tr>
    <tr>
      <td>4</td>
      <td>.contains()</td>
      <td>returns true if the vector<br />contains a particular value</td>
    </tr>
    <tr>
      <td>5</td>
      <td>remove(i)</td>
      <td>remove value at given index</td>
    </tr>
    <tr>
      <td>6</td>
      <td>.len()</td>
      <td>return len of the vector</td>
    </tr>
  </tbody>
</table>

<p>The following code demonstrates each of the above methods:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {

   let mut my_vec = Vec::new();

   println!("Empty Vector : {:?}", my_vec);

   my_vec.push(1);

   my_vec.push(2);

   my_vec.push(3);

   println!("Pushed elements 1 , 2 , 3 : {:?}", my_vec);

   my_vec.pop();

   println!("Popped value: {}", 3);

   println!("Popped element at last index : {:?}", my_vec);

   my_vec.remove(1);

   println!("Removed value: {}", 2);

   println!("Removed element at index 1 : {:?}", my_vec);

   println!("Size of vector is :{}", my_vec.len());

   println!("Does my vector contains 1 : {}", my_vec.contains(&amp;1));

}


</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Empty Vector : []
Pushed elements 1 , 2 , 3 : [1, 2, 3]
Popped value: 3
Popped element at last index : [1, 2]
Removed value: 2
Removed element at index 1 : [1]
Size of vector is :1
Does my vector contains 1 : true


</code></pre></div></div>

<p>Note: When using the .contains function, consider borrowing the value.</p>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of basics of vectors in Rust.</p>

<ol>
  <li>Vectors are resizable arrays.<br /></li>
</ol>

<p>A) True <br />
B) False <br /></p>

<ol>
  <li>What is the output of the following code?</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
let my_vec = vec![1, 2, 3, 4, 5];
match my_vec.get(10) {
    Some(x) =&gt; println!("Value at given index:{}", x),
    None =&gt; println!("Sorry, you are accessing a value out of bound")
}
match my_vec.get(3) {
    Some(x) =&gt; println!("Value at given index:{}", x),
    None =&gt; println!("Sorry, you are accessing a value out of bound")
}
  
}

</code></pre></div></div>

<p>A)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sorry, you are accessing a value out of bound
Value at given index: 4

</code></pre></div></div>
<p>B)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Value at given index: 4
Sorry, you are accessing a value out of bound

</code></pre></div></div>

<h1 id="resizing-a-vector">Resizing a Vector</h1>

<ul>
  <li>Add Elements to the Vector
    <ul>
      <li>Define a mutable vector variable.</li>
      <li>To add elements to the vector, use the push method.</li>
    </ul>
  </li>
</ul>

<p>The following illustration shows how the size of the vector grows by adding an element:</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/push-vector.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
fn main() {
   // define a vector of size 5
   let mut my_vec = vec![1, 2, 3, 4, 5];
   // print vector
   println!("Vector : {:?}", my_vec);
   // print the capacity of vector
   println!("Capacity of vector: {}", my_vec.capacity());
   // print the length of vector
   println!("Length of the vector : {}",my_vec.len());
   my_vec.push(6);
   my_vec.push(8); 
   // print vector
   println!("Vector : {:?}",my_vec);
   // print the capacity of vector
   println!("Capacity of vector: {}", my_vec.capacity());
   // print the length of vector
   println!("Length of the vector : {}", my_vec.len());
}



</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vector : [1, 2, 3, 4, 5]
Capacity of vector: 5
Length of the vector : 5
Vector : [1, 2, 3, 4, 5, 6, 8]
Capacity of vector: 10
Length of the vector : 7

</code></pre></div></div>

<h1 id="remove-elements-from-the-vector">Remove Elements from the Vector</h1>

<ul>
  <li>Define a mutable vector variable.</li>
  <li>Elements can be removed from the tail or at specific index of the vector.
    - To remove elements from the tail of the vector, use the pop method.
    - To remove elements at a specific position of the vector, specify the index number within the <code class="language-plaintext highlighter-rouge">remove()</code> method.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/remove-vector.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 
 fn main() {
   // define a vector of size 5
   let mut my_vec = vec![1, 2, 3, 4, 5];
   // print vector
   println!("Vector : {:?}", my_vec);
   // print the capacity of vector
   println!("Capacity of vector: {}", my_vec.capacity());
   // print the length of vector
   println!("Length of the vector : {}", my_vec.len());
   my_vec.pop();
   my_vec.pop(); 
   // print vector
   println!("Vector : {:?}",my_vec);
   // print the capacity of vector
   println!("Capacity of vector: {}", my_vec.capacity());
   // print the length of vector
   println!("Length of the vector : {}", my_vec.len());
}
 

</code></pre></div></div>

<p>output:-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Vector : [1, 2, 3, 4, 5]
Capacity of vector: 5
Length of the vector : 5
Vector : [1, 2, 3]
Capacity of vector: 5
Length of the vector : 3
 
</code></pre></div></div>

<p>Note that the <code class="language-plaintext highlighter-rouge">remove()</code> function requires the index of the vector element to be removed. However, if it is desired to pass the element to be removed, 
 then we need to know the index of the particular element of the vector and then remove it. Let‚Äôs explore that in the next lesson using the <code class="language-plaintext highlighter-rouge">.iter()</code> method.</p>

<h1 id="quiz-1">Quiz</h1>

<p>Test your understanding of resizing a vector in Rust.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
fn main() {
  
   let mut my_vec = vec![1, 2, 3, 4, 5];
   println!("Vector : {:?}",my_vec);
   println!("Length of the vector : {}",my_vec.len());
   my_vec.push(8);
   my_vec.push(7);
   my_vec.remove(2);
   my_vec.remove(1); 
   //print vector
   println!("Vector : {:?}",my_vec);
   //print the length of vector
   println!("Length of the vector : {}",my_vec.len());
}
 
</code></pre></div></div>

<p>A)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vector : [1, 2, 3, 4, 5]

Length of the vector : 5

Vector : [1, 4, 5, 8, 7]

Length of the vector : 5


</code></pre></div></div>
<p>B)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vector : [1, 2, 3, 4, 5]

Length of the vector : 5

Vector : [1, 4, 5, 7, 8]

Length of the vector : 5


</code></pre></div></div>

:ET