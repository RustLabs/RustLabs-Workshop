I"∆<h1 id="iterating-over-a-vector">Iterating Over a Vector</h1>

<p>If it is desired to access each element of a vector, then it is possible to iterate over the elements of a vector using <code class="language-plaintext highlighter-rouge">iter()</code> rather than using the indexes 
to access a particular element of a vector using the square bracket notation</p>

<h1 id="iterate-using-iter-built-in-method">Iterate Using <code class="language-plaintext highlighter-rouge">.iter()</code> Built-in Method</h1>

<ul>
  <li>
    <p>we learned to remove an element given an index. However, to remove a particular element, we first need to find the index 
of that element and then call the remove function passing that index.</p>
  </li>
  <li>
    <p>For this we can use the <code class="language-plaintext highlighter-rouge">.iter().position(|&amp;e| e == element_name).unwrap()</code>.</p>
  </li>
</ul>

<p>Here, <br /></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">iter()</code> is the built-in function that iterates over the elements of the vector.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.position</code> is a built-in function that takes the element name to get the position of that element in the vector, i.e., <code class="language-plaintext highlighter-rouge">(|&amp;e| e == element_name)</code> defines a variable e with the value equal to the name of the element that we want to find.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.unwrap()</code> is the built-in function.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    // defines a mutable vector
    let mut my_vec = vec![1, 2, 3, 4, 5];
    // define the value to be removed
    let value = 2; 
    // get the index of the value in the vector
    let index = my_vec.iter().position(|&amp;r| r == value).unwrap();
    // call the built-in remove method
    my_vec.remove(index);
    // print the updated vector
    println!("Updated Vector: {:?}", my_vec);
}

</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Updated Vector: [1, 3, 4, 5]

</code></pre></div></div>

<p>As you can see the value 2 is removed from the vector.
you‚Äôll learn how the iterator function helps to loop through each element in the vector index-by-index.</p>

<h1 id="loop-through-the-values">Loop Through the Values</h1>
<ul>
  <li>Define a vector variable.</li>
  <li>The values of the vector within the loop can be traversed using <code class="language-plaintext highlighter-rouge">.iter()</code>.</li>
</ul>

<p>üìùIf you don‚Äôt write <code class="language-plaintext highlighter-rouge">.iter()</code> within the loop defination, a simple for loop will give you the same result.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 
  fn main() {
    // define a vector of size 5   
    let my_vec = vec![1, 2, 3, 4, 5];
    // using loop
    let mut index = 0;
    for i in my_vec.iter(){ // it works even if .iter() is not written
        println!("Element at index {}:{} ", index, i);
        index = index + 1;
    }
}
  
  
</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Element at index 0:1 
Element at index 1:2 
Element at index 2:3 
Element at index 3:4 
Element at index 4:5 
  
 
</code></pre></div></div>

<h1 id="loops-and-mutate-values">Loops and Mutate Values</h1>
<ul>
  <li>Define a mutable vector variable</li>
  <li>The values of the vector within the loop can be changed using <code class="language-plaintext highlighter-rouge">.iter_mut()</code>.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  fn main() {
   // define a vector of size 5
   let mut my_vec = vec![1, 2, 3, 4, 5];
   println!("Initial Vector : {:?}", my_vec);
   for x in my_vec.iter_mut(){
       *x *= 3;
   }
   // print the updated vector
   println!("Updated Vector : {:?}", my_vec);
}
  
</code></pre></div></div>

<p>The following illustration shows how the above code works:</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/iter-vector.png" alt="" /></p>

<p># Quiz</p>

<p>Test your understanding of looping through a vector in Rust.</p>

<ol>
  <li>What is the output of the following code?</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
   let mut my_vec = vec![1, 2, 3, 4, 5];
   for x in my_vec.iter_mut(){
       *x += 4;
   }
   my_vec.push(23); 
   println!("Vector : {:?}",my_vec);
   println!("Length of the vector : {}",my_vec.len());
}


</code></pre></div></div>

<p>A)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vector : [5, 6, 7, 8, 9, 23]

Length of the vector : 5

</code></pre></div></div>
<p>B)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vector : [5, 6, 7, 8, 9, 23]

Length of the vector : 6

</code></pre></div></div>

:ET