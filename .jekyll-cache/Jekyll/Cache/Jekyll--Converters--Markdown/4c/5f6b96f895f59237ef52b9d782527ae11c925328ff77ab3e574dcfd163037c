I"è<h1 id="memory-management">Memory Management</h1>

<p>In many programming languages, there is no need to bother where the memory is allocated. But in system programming languages 
like Rust, a program‚Äôs behavior depends upon the memory being used, i.e., stack or heap.</p>

<h1 id="stack">Stack</h1>
<ul>
  <li>When the size of data is known at <code class="language-plaintext highlighter-rouge">compile-time</code>, a stack is used for storage.</li>
</ul>

<h1 id="what-is-a-stack">What Is a Stack?</h1>

<p>A stack is a Last in First Out(LIFO) data storage memory location meaning all values are stored in a last in first out order.
Let‚Äôs imagine a real-life analogy to understand stack. There is a huge pile of books with a wall all the way around it. 
You want the one in the middle. You can‚Äôt just slip one from the middle. So, you‚Äôll remove items until the desired location is reached.
Inserting values onto the stack is a push operation and removing values from the stack is a pop operation.</p>

<ul>
  <li>
    <p>Example 
All primitive data types that have a fixed size are stored on a stack.</p>
  </li>
  <li>
    <p>Illustration 
The following example has a variable a and a variable b. Both are initialized to 1 and stored on the stack.</p>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/rust-stack.png" alt="" /></p>

<h1 id="heap">Heap</h1>

<p>When the size of data is not known at compile time rather it is known at the run time, it goes in a portion of program memory called a heap.</p>

<h1 id="what-is-a-heap">What Is a Heap?</h1>

<p>Heap is a big data storage and stores values whose size is unknown at compile time. The operating system allocates a 
space in the heap that is adequate, marks it as in use, and returns a pointer, which is the address of that location.</p>

<p>Let‚Äôs imagine a real-life analogy to understand heap. Suppose there are 4 students in a class and the classroom has the
accommodations for 8. One new student gets enrolled and is directed to the classroom. Now the total students in the class becomes 5.</p>

<ul>
  <li>
    <p>Example
Since Vectors and String Objects are resizable, they are stored in a heap.</p>
  </li>
  <li>A String is made up of three parts:
    <ul>
      <li>A pointer to the memory that holds the contents of the string</li>
      <li>Length</li>
      <li>Capacity</li>
    </ul>
  </li>
  <li>
    <p>This group of the information above is stored on the stack.</p>
  </li>
  <li>The memory on the heap holds the value assigned to the string. Below is the example of string object str which is initialized to Rust.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/rust-heap-syn.png" alt="" /></p>

<p>Here, ptr is a pointer to the base address of the string str. len is the total length of the string in bytes and capacity is the total amount of memory
that the operating system has provided to the string.</p>

<h1 id="stack-vs-heap">Stack vs. Heap</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Pushing values on to the stack is much easier than heap since the operating system does not have to find 
a big space in memory and mark the pointer for the next allocation.
- Accessing data from the stack is much faster than heap since the processor will take less time to access the data that is closer to the other data.
</code></pre></div></div>

<h1 id="quiz">Quiz</h1>
<p>Test your understanding of stack and heap.</p>

<ol>
  <li>
    <p>Primitive variables ae stored on: <br />
A) Stack <br />
B) Heap <br /></p>
  </li>
  <li>
    <p>Non-primitive variables are stored on:<br />
A) Stack <br />
B) Heap <br /></p>
  </li>
  <li>
    <p>Which of the following allows unknown data size storage?<br />
A) Stack <br />
B) Heap <br /></p>
  </li>
  <li>
    <p>The known data size is stored on:<br />
A) Stack <br />
B) Heap <br /></p>
  </li>
</ol>

:ET