I"À<h1 id="returning-a-value-from-a-function">Returning a Value From a Function</h1>

<ul>
  <li>Returning Functions</li>
</ul>

<p>The functions can return a value using the return keyword inside the function definition. After the return statement is executed, the control gets back to the caller.
A function invocation is replaced with the value that the call returns. Thus, that value can be saved in a variable.</p>

<ul>
  <li>Syntax
The function definition for returning a value from a function:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/return-fn-val.png" alt="Defining a function with explicitly defining the return value" /></p>

<p>There are two ways to actually return the value.</p>

<p>The general syntax for returning a value from a function using the return keyword:</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/return-val.png" alt="" /></p>

<p>The following syntax can be used to return a value from a function without using the return keyword:</p>

<p>Just write the return value, the compiler will interpret it because of the -&gt; sign in the function definition.</p>

<h1 id="example-1">Example 1</h1>

<p>The following example makes a function <code class="language-plaintext highlighter-rouge">square()</code> that takes a number n as a parameter to the function and stores the square of n in the 
local variable m and returns the variable m.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn square(n:i32)-&gt;i32{
  println!("The value of n inside function : {}", n);
  let m = n * n;
  m // return the square of the number n
}  
fn main() {
  let  n = 4;
  println!("The value of n before function call : {}", n);
  println!("Invoke Function");
  println!("\nOutput : {}",square(n));
}

</code></pre></div></div>
<p>output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The value of n before function call : 4
Invoke Function
The value of n inside function : 4

Output : 16

</code></pre></div></div>
<h1 id="example-2">Example 2</h1>

<p>The following example makes a function square() that takes a number n as a parameter to the function and returns the square of the number n 
by using the return keyword.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn square(n:i32)-&gt;i32{
  println!("The value of n inside function : {}", n);
  return n * n;
}  
fn main() {
  let  n = 4;
  println!("The value of n before function call : {}", n);
  println!("Invoke Function");
  println!("\nOutput : {}", square(n));
}


</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The value of n before function call : 4
Invoke Function
The value of n inside function : 4

Output : 16


</code></pre></div></div>
<h1 id="explanation">Explanation</h1>
<p>The above program is of two parts, the user defined function square() and the driver function main() where the function is being called.</p>

<ul>
  <li>User defined function</li>
</ul>

<p>The function <code class="language-plaintext highlighter-rouge">square()</code> is defined from <code class="language-plaintext highlighter-rouge">line 1</code> to <code class="language-plaintext highlighter-rouge">line 4</code>.</p>

<ul>
  <li>
    <p>On <code class="language-plaintext highlighter-rouge">line 3</code> n is multiplied with itself and the value is saved in n and value of type i32 is returned using the return keyword.</p>
  </li>
  <li>
    <p>Driver function</p>
  </li>
</ul>

<p>The driver function <code class="language-plaintext highlighter-rouge">main()</code> is defined from <code class="language-plaintext highlighter-rouge">line 5</code> to <code class="language-plaintext highlighter-rouge">line 10</code>.</p>
<ul>
  <li>On <code class="language-plaintext highlighter-rouge">line 6</code>, a variable n is defined.</li>
  <li>On <code class="language-plaintext highlighter-rouge">line 9</code>, the function square() is invoked which takes n as an argument to the function and the value of the square is printed using the<code class="language-plaintext highlighter-rouge"> println!()</code> macro.</li>
</ul>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of returning a value from a function in Rust.</p>

<ol>
  <li>What is the output of the following code?</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main(){
   println!("Area of rectangle is {}", get_area(2, 2));
}
fn get_area(x:i32, y:i32) -&gt; i32 {
   x  *  y
}

</code></pre></div></div>
<p>A) 4. <br />
B) 4.0 <br /></p>

:ET