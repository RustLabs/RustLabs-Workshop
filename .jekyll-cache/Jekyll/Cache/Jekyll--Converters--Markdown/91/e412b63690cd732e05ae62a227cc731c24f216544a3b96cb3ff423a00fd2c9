I"ú<h1 id="functions-and-strings">Functions and Strings</h1>

<h1 id="passing-primitive-string---string-literal-str">Passing Primitive String - String Literal <code class="language-plaintext highlighter-rouge">(&amp;str)</code></h1>

<p>String literals are passed to the functions just like other variables. They can be reused after the function call.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main(){
   let course: &amp;str = "Rust Programming";
   display_course_name(course); 
   println!("{}",course); // string literal is used after the function call
}
fn display_course_name(my_course: &amp;str){
   println!("Course : {}", my_course);
}

</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Course : Rust Programming
Rust Programming

</code></pre></div></div>
<h1 id="passing-growable-string---string-object-string">Passing Growable String - String Object <code class="language-plaintext highlighter-rouge">(String)</code></h1>

<p>While passing String Objects to functions, they cannot be reused again because the value once passed gets moved to that functionâ€™s scope and cannot be reused.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main(){
   let course:String = String::from("Rust Programming");
   display_course_name(course); 
   //cannot access course after display
}
fn display_course_name(my_course:String){
   println!("Course : {}", my_course);
}

</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Course : Rust Programming
</code></pre></div></div>
:ET