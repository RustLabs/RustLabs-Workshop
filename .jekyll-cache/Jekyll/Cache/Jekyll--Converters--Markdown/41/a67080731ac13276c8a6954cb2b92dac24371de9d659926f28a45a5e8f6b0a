I"<h1 id="introduction-to-enums">Introduction to Enums</h1>

<ul>
  <li>What Are Enums? 
Enum is a custom data type that is composed of variants.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Variants are values which are definite.

</code></pre></div></div>
<p>The key is to enumerate all possible values and select one of the values from the list.</p>

<ul>
  <li>Let’s consider a real life example to understand the concept of enums. The traffic signal can have<br />
only three possible states: red, yellow and green for stop, slow down, and go respectively.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/traffic-signal.png" alt="" /></p>

<h1 id="declare-an-enum">Declare an Enum</h1>

<p>Enums are declared using the enum keyword followed by the name of the enum and then the body of the enum 
enclosed within curly braces <code class="language-plaintext highlighter-rouge">{</code> <code class="language-plaintext highlighter-rouge">}</code>. Within the curly braces, the variants of the enum are defined.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/enum-syntax.png" alt="" /></p>

<p>Naming Convention</p>
<ul>
  <li>The name of the enum and it’s variants are written in CamelCase.</li>
</ul>

<h1 id="initialize-an-enum">Initialize an Enum</h1>

<p>Enums are initialized using the name of the enum followed by a double colon<code class="language-plaintext highlighter-rouge">(::)</code> and then specifying the name of the variant of the enum.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/enum-syntax-init.png" alt="" /></p>

<p>Note: To print the values of an enum, write <code class="language-plaintext highlighter-rouge">#[derive(Debug)]</code> at the beginning of the program code. Use the debug <code class="language-plaintext highlighter-rouge">trait{:?}</code> for printing the variants.</p>

<ul>
  <li>Example 
The following example declares an <code class="language-plaintext highlighter-rouge">enum</code> named <code class="language-plaintext highlighter-rouge">KnightMoves</code>.</li>
</ul>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0b/Knight_%28chess%29_movements.gif" alt="" /></p>

<p>Note: To keep things simple, two variants are mentioned. However, a Knight in chess can move be in four directions. It moves to a square that is two squares 
away horizontally and one square vertically, or two squares vertically and one square horizontally</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// make this `enum` printable with `fmt::Debug`.

#[derive(Debug)]

enum KnightMove{

   Horizontal, Vertical

}

fn main() {

   // use enum

   let horizontal_move = KnightMove::Horizontal;

   let vertical_move = KnightMove::Vertical;

   // print the enum values

   println!("Move 1: {:?}", horizontal_move);

   println!("Move 2: {:?}", vertical_move);

}



</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Move 1: Horizontal
Move 2: Vertical

</code></pre></div></div>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of basics of enums in Rust.</p>

<ol>
  <li>Suppose you have defined an <code class="language-plaintext highlighter-rouge">enum</code></li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum Move{
  Left, Right, Top, Bottom
}

</code></pre></div></div>
<p>How would you call variant <code class="language-plaintext highlighter-rouge">Left</code> in the <code class="language-plaintext highlighter-rouge">main</code> function?</p>

<p>A)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let my_move=Move::Left;
</code></pre></div></div>
<p>B)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let my_move=Move:Left;
</code></pre></div></div>

:ET