I"a<p>Pass by Reference</p>

<h1 id="arguments-pass-by-reference">Arguments Pass by Reference</h1>
<p>When we want the called function to make changes to the parameters such that the changes are seen by the calling function when the call returns.
The mechanism to do this is called pass arguments by reference.</p>

<h1 id="syntax">Syntax</h1>
<p>The general syntax of passing arguments by value is:
<img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/fn_pass-by-ref.png" alt="" /></p>

<h1 id="example">Example</h1>
<p>The following example makes a function <code class="language-plaintext highlighter-rouge">square()</code> that takes a number n which is being passed by reference as a parameter 
to the function and prints the square of the function within the function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn square(n:&amp;mut i32){
  *n = *n * *n;
  println!("The value of n inside function : {}", n);
}  
fn main() {
  let  mut n = 4;
  println!("The value of n before function call : {}", n);
  println!("Invoke Function");
  square(&amp;mut n);
  println!("The value of n after function call : {}", n);
}
</code></pre></div></div>
<p>Output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The value of n before function call : 4
Invoke Function
The value of n inside function : 16
The value of n after function call : 16

</code></pre></div></div>
<h1 id="explanation">Explanation</h1>

<p>The above program comprises two functions, the user defined function square() and the driver function main() where the function is being called.</p>

<h1 id="user-defined-function">User defined function</h1>

<ul>
  <li>
    <p>The function <code class="language-plaintext highlighter-rouge">square()</code> is defined from <code class="language-plaintext highlighter-rouge">line 1</code> to <code class="language-plaintext highlighter-rouge">line 4 </code>which takes a mutable reference <code class="language-plaintext highlighter-rouge">(&amp;mut)</code> to the parameter n of type <code class="language-plaintext highlighter-rouge">i32</code>.</p>

    <ul>
      <li>
        <p>On <code class="language-plaintext highlighter-rouge">line 2</code>, the square of the variable n is calculated. Since n is a reference to a variable, to access the referenced variableâ€™s value, a de-referencing is required. That is achieved with the <code class="language-plaintext highlighter-rouge">*n</code>. On the right handside, the value 
  referenced by n is accessed and multiplied with itself. The assignment is also to *n, which means the calculated result is stored in the variable that n is referencing.</p>
      </li>
      <li>
        <p>The square of the function is printed on <code class="language-plaintext highlighter-rouge">line 3</code>.</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="driver-function">Driver function</h1>

<p>The driver function <code class="language-plaintext highlighter-rouge">main()</code> is defined from <code class="language-plaintext highlighter-rouge">line 5</code> to <code class="language-plaintext highlighter-rouge">line 11</code>.</p>

<ul>
  <li>On <code class="language-plaintext highlighter-rouge">line 6</code>, a mutable variable n is defined.</li>
  <li>On <code class="language-plaintext highlighter-rouge">line 9</code>, the function square() is invoked.The argument to this function is &amp; mut n. Here, <code class="language-plaintext highlighter-rouge">&amp; </code>indicates that it is a reference to the 
    variable n and mut indicates that n can be changed inside the function <code class="language-plaintext highlighter-rouge">square()</code>.
    - After the function call, the value of the n is printed.</li>
</ul>

<p>Note: The value of n is changed within the function.</p>

<p>Note: The argument, as well as the parameter, is set as a mutable reference when the value is passed by reference.
 If the value is to be updated it is dereferenced first and then the update operation is performed.</p>

<p># Quiz</p>

<p>Test your understanding of passing arguments by reference in a function in Rust.</p>

<ol>
  <li>What is the output of the following code?</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn change(x:&amp;mut i32, y:&amp;mut i32){
  *x = 0;
  *y = 0;
  println!("x : {}, y : {}", x , y);
}
fn main() {
  let mut x = 10;
  let mut y = 9;
  change( &amp;mut x, &amp;mut y );
  println!("x : {}, y : {}", x , y);
}

</code></pre></div></div>
<p>A)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x : 0, y : 0
x : 0, y : 0
</code></pre></div></div>
<p>B)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x : 9, y : 10
x : 0, y : 0
</code></pre></div></div>

:ET