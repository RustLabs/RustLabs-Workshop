I"‡<h1 id="enums-with-data-type">Enums With Data Type</h1>

<p>By default, the Rust compiler infers the data type for all variants of an enum. However, 
it is possible to use different data types for different variants of an enum.</p>

<h1 id="syntax">Syntax</h1>
<ul>
  <li>The data type can be added to each variant enclosed within round brackets <code class="language-plaintext highlighter-rouge">()</code>.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/enum-data-type.png" alt="" /></p>

<ul>
  <li>Example 
The following example makes an enum KnightMove having two variants Horizontal and Vertical both of type String.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// make this `enum` printable with `fmt::Debug`.

#[derive(Debug)]

enum KnightMove{

   Horizontal(String), Vertical(String)

}

fn main() {

   // invoke an enum

   let horizontal_move = KnightMove::Horizontal("Left".to_string());

   let vertical_move = KnightMove::Vertical("Down".to_string());

   // print enum

   println!("Move 1: {:?}", horizontal_move);

   println!("Movw 2: {:?}", vertical_move);

}

</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Move 1: Horizontal("Left")
Movw 2: Vertical("Down")

</code></pre></div></div>

:ET