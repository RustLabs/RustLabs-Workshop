I"Ü"<h1 id="controlling-visibility-within-the-same-file-using-pub">Controlling Visibility Within the Same File Using ‚Äòpub‚Äô</h1>

<p>The <code class="language-plaintext highlighter-rouge">pub</code> keyword makes the item public and visible outside its scope.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/module-syntax-pub.png" alt="" /></p>

<h1 id="privacy-rules">Privacy Rules</h1>

<p>The following are two privacy rules when declaring modules:</p>

<ul>
  <li>Rule No: 1</li>
</ul>

<p>If an item is public it can be accessed from anywhere, i.e., within main function or any other module.</p>

<h1 id="example--invoke-a-public-function-directly">Example : Invoke a Public Function Directly</h1>

<p>The following example declares a function public <code class="language-plaintext highlighter-rouge">print_statement()</code> within the mod r:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// declare a module

mod r {

  pub fn print_statement(){

    println!("Hi, this a function of module r");

  }

}

// main function

fn main() {

  println!("Let's go inside the module");

  // invoke a module 'r'

   r::print_statement();

}


</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Let's go inside the module
Hi, this a function of module r


</code></pre></div></div>

<h1 id="rule-no-2">Rule No: 2</h1>
<ul>
  <li>
    <p>If an item is private it can be accessed using its parent module meaning it can be accessed within the module but not outside it.</p>
  </li>
  <li>
    <p>Example: Invoke a Private Function Indirectly through a Public Function</p>
  </li>
  <li>
    <p>The example declares a module mod r which has two functions:</p>
    <ul>
      <li>A public function my_public_function()</li>
      <li>A private function my_private_function().</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">self</code> can refer to a function or any item within the same module.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// declare a module

mod r{

  fn my_private_function(){

    println!("Hi, I'm a private function within the module");

  }

  pub fn my_public_function(){

    //! also works without writing self i.e.

    //! my_private_function();

    println!("Hi,I'm a public function within the module");

    println!("I'll invoke private function within the module");

    self::my_private_function(); 

    

  }

}

// main function

fn main() {

  println!("Let's go inside the module");

  // invoke a module 'r'

   r::my_public_function();

}


</code></pre></div></div>

<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Let's go inside the module
Hi,I'm a public function within the module
I'll invoke private function within the module
Hi, I'm a private function within the module

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>If an item is private, it can be called from within the child module.
</code></pre></div></div>

<h2 id="example-access-a-private-function-through-a-child-module">Example: Access a Private Function through a Child Module</h2>

<p>üìùIf there is a module within the module, then the outer module is called the parent module and the module inside the parent module
is called the child module. This is known as a nested module</p>

<p>The example declares a module mod outer_module which has:</p>
<ul>
  <li>A private functionmy_private_function().</li>
  <li><code class="language-plaintext highlighter-rouge">inner_module</code>
    - Inner module has one public function <code class="language-plaintext highlighter-rouge">my_public_function()</code></li>
</ul>

<p>The following example shows how the private function is accessed in the child module using the keyword super followed by 
<code class="language-plaintext highlighter-rouge">::</code> and the function name in the parent module.</p>

<p><code class="language-plaintext highlighter-rouge">super</code> keyword refers to the parent module.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 // main function
fn main() {
  println!("Let's go inside the module");
  outer_module::inner_module::my_public_function();
}
// declare a module
mod outer_module {
  // function within outer module
  fn my_private_function() {
    println!("Hi, I got into the private function of outer module");
  }
  // declare a nested module
  pub mod inner_module {
    // function within nested module
    pub fn my_public_function() {
      println!("Hi, I got into the public function of inner module");
      println!("I'll invoke private function of outer module");
      super::my_private_function();
    }
  }
}
 

</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Let's go inside the module
Hi, I got into the public function of inner module
I'll invoke private function of outer module
Hi, I got into the private function of outer module
 
</code></pre></div></div>

<p>Even though the function <code class="language-plaintext highlighter-rouge">my_private_function()</code> is declared private, the main() function is able to invoke it
 indirectly because the function it calls is public.</p>

<h2 id="example-access-a-root-function">Example: Access a Root Function</h2>

<p>The example below shows how the root function (a function that exists outside the module) can be accessed within
the function of a module. Write <code class="language-plaintext highlighter-rouge">super::</code> followed by the root function name.</p>

<p><code class="language-plaintext highlighter-rouge">super</code> can allow accessing a root function from within the module.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
// main function
fn main() {
  println!("Let's go inside the module");
  my_module ::my_public_function();
}
fn my_function(){
  println!("Hi, you came inside the root function using super");
  }

// declare a module
mod my_module {
  // function within outer module
  pub fn my_public_function() {
    println!("Invoke root function");
    super::my_function();
  }
}


</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Let's go inside the module
Invoke root function
Hi, you came inside the root function using super

</code></pre></div></div>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of the pub keyword.</p>
<ol>
  <li>How can you make a call to the function inside module r? <br /></li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mod r {
  pub fn print_statement() {
    println!("Hi, this a function of module r");
  }
}

</code></pre></div></div>
<p>A)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>r :: print_statement()
</code></pre></div></div>
<p>B)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print_statement()

</code></pre></div></div>

<ol>
  <li>
    <p>You can invoke a private function directly.<br />
A) True <br />
B) False <br /></p>
  </li>
  <li>
    <p>You can invoke a private function through a public function.<br />
A) True <br /> 
B) False <br /></p>
  </li>
  <li>
    <p>How can you access a function within the module containing it? <br />
A)Using <code class="language-plaintext highlighter-rouge">self::function_name( )</code> <br />
B)Using <code class="language-plaintext highlighter-rouge">function_name( )</code> <br />
C)Using <code class="language-plaintext highlighter-rouge">super :: function_name( )</code> <br /></p>
  </li>
  <li>
    <p>How can you access a parent module‚Äôs private function from a child module‚Äôs function?<br />
A) Using <code class="language-plaintext highlighter-rouge">super :: function_name_parent()</code><br />
B) Using <code class="language-plaintext highlighter-rouge">self :: function_name_parent()</code><br />
C) Using <code class="language-plaintext highlighter-rouge">function_name_parent()</code><br /></p>
  </li>
</ol>

<p>6.Suppose a function is defined outside of a module. How would you invoke it through a module? <br />
A) <code class="language-plaintext highlighter-rouge">super :: function_name()</code>
B) <code class="language-plaintext highlighter-rouge">self:: function_name()</code></p>

:ET