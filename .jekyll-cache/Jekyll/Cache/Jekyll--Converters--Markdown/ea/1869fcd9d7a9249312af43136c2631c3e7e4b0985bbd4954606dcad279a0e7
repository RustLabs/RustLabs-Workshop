I"µ<h1 id="control-visibility-within-different-files-using-pub">Control Visibility Within Different Files Using ‚Äòpub‚Äô</h1>

<p>When modules get large and become cumbersome to store in a single file, it is possible to move their definitions to a 
separate file to make the code easier to navigate. It is possible to access a module even if it belongs to a different file. 
To use the module in a different file, write mod followed by the name of the file in which the module is declared.</p>

<ul>
  <li>Implicit Declaration 
A block of code put in a file without wrapping in a mod block implicitly declares a module.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/module-implicit.png" alt="" /></p>

<ul>
  <li>Import the module
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mod file_name
</code></pre></div>    </div>
  </li>
  <li>Call the module
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file_name::x
</code></pre></div>    </div>
    <p>Where <code class="language-plaintext highlighter-rouge">x</code> can be any construct within the module, i.e., function, array, trait, struct.</p>
  </li>
</ul>

<p>üìù Rust code is always put in files with <code class="language-plaintext highlighter-rouge">.rs</code> extension</p>

<h1 id="explicit-declaration">Explicit Declaration</h1>

<p>The code in a file is wrapped within the mod block. This explicitly declares a module.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/module-explicit.png" alt="" /></p>

<ul>
  <li>Import the module
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mod file_name
</code></pre></div>    </div>
  </li>
  <li>Call the module
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> file_name::module_name::x
</code></pre></div>    </div>
    <p>where x can be any construct within the module, i.e., function, array, trait, struct.</p>
  </li>
</ul>

<h1 id="privacy-rule">Privacy Rule</h1>
<ul>
  <li>If the module belonging to some other file is to be made accessible then it should be made public by using the pub keyword before the mod.</li>
</ul>

<p>üìùOnce the module is made public using pub, all privacy rules for defining modules within the same file apply.</p>

<h1 id="example">Example</h1>

<p>The following example shows how a module in another file can be accessed.</p>
<ul>
  <li>Implicit declaration
The following example declares a module implicitly in a file <code class="language-plaintext highlighter-rouge">my_mod.rs</code> and calls it from <code class="language-plaintext highlighter-rouge">main.rs</code>.
Note: In implicit declaration modules are public by default</li>
</ul>

<p>main.rs</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mod my_mod; 

fn main() {

  println!("Invoke function in my_mod.rs");  

  my_mod::my_public_function();

}

</code></pre></div></div>
<p>my_mod.rs</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// declare a module
pub fn my_public_function() {
    println!("I am a public function in my_mod.rs");
}

</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Invoke function in my_mod.rs
I am a public function in my_mod.rs

</code></pre></div></div>

<h1 id="explicit-declaration-1">Explicit declaration</h1>
<ul>
  <li>The following example declares a module module in a file <code class="language-plaintext highlighter-rouge">my_mod.rs</code> and call it from <code class="language-plaintext highlighter-rouge">main.rs</code>.</li>
</ul>

<p>main.rs</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mod my_mod; 

fn main() {

  println!("I am a public function in my_mod.rs");

  my_mod::module::my_public_function();

}

</code></pre></div></div>
<p>my_mod.rs</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// declare a module
pub mod module{
pub fn my_public_function() {
    println!("I am a public function in my_mod.rs");
}
}

</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I am a public function in my_mod.rs
I am a public function in my_mod.rs

</code></pre></div></div>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of modules in different files.</p>

<ol>
  <li>Implicit declaration of a module in a different file makes them public by default.<br />
A) True <br />
B) False <br /></li>
</ol>

<p>2.For explicitly defining a module in a different file, and accessing it in a different file, make it? <br />
A) public using pub <br />
B) private <br /></p>

:ET