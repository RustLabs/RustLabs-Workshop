I"V<h1 id="what-are-tuples">What are Tuples?</h1>

<ul>
  <li>Tuples are heterogeneous sequences of elements, meaning, each element in a tuple can have a different data type. Just like arrays, tuples are of a fixed length.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/tuple.png" alt="" /></p>

<ul>
  <li>Define a Tuple</li>
</ul>

<p>A tuple can be defined by writing let followed by the name of the tuple and then enclosing the values within the parenthesis.</p>

<ul>
  <li>Syntax 1
    <ul>
      <li>The syntax below defines a tuple without specifying the type. However, the compiler can infer the type.</li>
    </ul>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/tuple-syntax1.png" alt="" /></p>

<ul>
  <li>Syntax 2
    <ul>
      <li>The syntax below defines a tuple by specifying the type.
 <img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/tuple-syntax2.png" alt="" /></li>
    </ul>
  </li>
</ul>

<p># Example</p>

<p>The following illustration explains the concept:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#[allow(unused_variables, unused_mut)]
fn main() {
    //define a tuple
    let person_data = ("Alex", 48, "35kg", "6ft");
    // define a tuple with type annotated
    let person_data : (&amp;str, i32, &amp;str, &amp;str) = ("Alex", 48, "35kg", "6ft");
}

</code></pre></div></div>
<ul>
  <li>Access the Value of the Tuple</li>
  <li>Unlike array which uses <code class="language-plaintext highlighter-rouge">[]</code> for accessing an element, the value of the tuple can be accessed using the dot operator ` (.) `.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> tuplename.indexvalue
 
</code></pre></div></div>
<p>To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> let person_data = ("Alex", 48, "35kg", "6ft");
    let (w, x, y, z) = person_data;
 
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> fn main() {
    //define a tuple
    let person_data = ("Alex", 48, "35kg", "6ft");
    // access value of a tuple
    println!("The value of the tuple at index 0 and index 1 are {} {}",person_data.0,person_data.1);

    //define a tuple
    let person_data = ("Alex", 48, "35kg", "6ft");
    // get individual values out of tuple
    let (w ,x, y, z) = person_data;
    //print values
    println!("Name : {}",w);
    println!("Age : {}",x);
    println!("Weight : {}",y);
    println!("Height : {}",z);
}
 

</code></pre></div></div>
<p>output:-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> The value of the tuple at index 0 and index 1 are Alex 48
Name : Alex
Age : 48
Weight : 35kg
Height : 6ft
 
</code></pre></div></div>

<h1 id="how-to-make-a-tuple-mutable">How to Make a Tuple Mutable?</h1>

<p>Just like a variable becomes mutable by adding the mut keyword after let, the same goes for a tuple.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    //define a tuple
    let mut person_data = ("Alex", 48, "35kg", "6ft");
    //print the value of tuple
    println!("The value of the tuple at index 0 and index 1 are {} {}", person_data.0, person_data.1);
    //modify the value at index 0
    person_data.0 = "John";
    //print the modified value
    println!("The value of the tuple at index 0 and index 1 are {} {}", person_data.0, person_data.1);
}

</code></pre></div></div>
<p>output:-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The value of the tuple at index 0 and index 1 are Alex 48
The value of the tuple at index 0 and index 1 are John 48
</code></pre></div></div>

<h1 id="print-the-tuple">Print the Tuple</h1>

<p>The whole tuple can be traversed using the debug trait.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    //define a tuple
    let person_data = ("Alex", 48, "35kg", "6ft");
    //print the value of tuple
    println!("Tuple - Person Data : {:?}",person_data);
}


</code></pre></div></div>
<p>output:-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tuple - Person Data : ("Alex", 48, "35kg", "6ft")



</code></pre></div></div>
<h1 id="quiz">Quiz</h1>

<p>Test your understanding of tuples in Rust!</p>

<ol>
  <li>
    <p>Which of the following statements is not true? <br />
a) Tuple is immutable by default <br />
b) Array is immutable by default <br />
c) Tuple can never be made mutable <br />
d) Array can never be made mutable <br /></p>
  </li>
  <li>
    <p>What is the output of the following code snippet? <br /></p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let (w ,x, y, z) = ("1","3","2","4");
println!("w : {}",w);
println!("x : {}",x);
println!("y : {}",y);
println!("z : {}",z);


</code></pre></div></div>
<p>a)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>w : 1

x : 3

y : 2

z : 4
</code></pre></div></div>
<p>b)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>w : 1

x : 2

y : 3

z : 4


</code></pre></div></div>

:ET