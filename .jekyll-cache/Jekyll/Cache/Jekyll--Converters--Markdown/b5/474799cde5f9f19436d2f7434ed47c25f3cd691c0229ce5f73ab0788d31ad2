I"S<h1 id="variables">Variables</h1>

<p>A variable is like a storage box paired with an associated name which contains data. The associated name is the identifier and the data that goes inside the variable is the value. They are immutable by default, meaning, you cannot reassign value to them.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/variable.png" alt="" /></p>

<h1 id="create-a-variable">Create a Variable</h1>

<p>To create a variable, use the let binding followed by the variable name.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/var-syntax.png" alt="" /></p>

<ul>
  <li>What is binding?</li>
</ul>

<p>Rust refers to declarations as bindings as they bind a name at the time of creation. let is a kind of declaration statement.</p>

<ul>
  <li>Naming Convention: By convention, you would write a variable name in a snake_case i.e.,
    <ul>
      <li>All letters should be lower case.</li>
      <li>All words should be separated using an underscore <code class="language-plaintext highlighter-rouge">( _ )</code>.</li>
    </ul>
  </li>
</ul>

<h1 id="initialize-a-variable">Initialize a Variable</h1>

<p>A variable can be initialized by assigning a value to it when it is declared. The value is said to be bound to that variable.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/init-var.png" alt="" /></p>

<p>Note: It’s possible to declare the variable first and assign it a value later. However, it is not recommended to do this as it may lead to the use of uninitialized variables.</p>

<p>The example below declares a variable, language , and initializes it with a value, Rust , and then displays the value of said variable:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    let language = "Rust"; // define a variable
    println!("Language: {}", language); // print the variable
}


</code></pre></div></div>

<p>Note: Just like numbers it is not possible to directly print a variable within a println!(). You need a placeholder.</p>

<h1 id="what-if-you-want-to-make-a-variable-mutable">What if You Want to Make a Variable Mutable?</h1>

<p>At the beginning of this lesson, it was mentioned that a variable is immutable until you want to make a change in the variable, then it can be made mutable. To make a variable mutable, write let followed by the mut keyword and the variable name</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/init-mut-var.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
    let mut language = "Rust"; // define a mutable variable
    println!("Language: {}", language); // print the variable
    language = "Java"; // update the variable
    println!("Language: {}", language); // print the updated value of variable
}


</code></pre></div></div>

<h1 id="assigning-multiple-variables">Assigning Multiple Variables</h1>

<p>It is possible to assign multiple variables in one statement.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/multi-var.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
fn main() {
    let (course,category) =("Rust","beginner"); // assign multiple values
    println!("This is a {} course in {}.", category, course); // print the value
}


</code></pre></div></div>
<p>Note: If a variable is kept un-assigned or unused, you’ll get a warning. To remove such a warning write the expression <code class="language-plaintext highlighter-rouge">#[allow(unused_variables, unused_mut)] </code> at the start of the program code. However, it’s not a good practice to keep unassigned/unused variables.</p>

<h1 id="quiz">Quiz</h1>

<p>Test your understanding of variables in Rust!</p>

<ol>
  <li>
    <p>Which one is not a property of a default variable? <br /> 
a) mutability <br /> 
b) store primitive data <br /> 
c) store reference to a data <br /></p>
  </li>
  <li>
    <p>Which of the following code snippets help to make a mutable variable?<br /> 
a) <code class="language-plaintext highlighter-rouge">let course_name = "Rust";</code> <br /> 
b) <code class="language-plaintext highlighter-rouge">let mut course_name = "Rust";</code><br /></p>
  </li>
</ol>

:ET