I"°<h1 id="ownership">Ownership</h1>

<ul>
  <li>What Is Ownership?
    <ul>
      <li>Ownership in simple terms means to have possession of something.</li>
      <li>
        <p>Let‚Äôs look at a real-life analogy to explain this concept. If something belongs to you, you say ‚ÄúIt‚Äôs mine‚Äù.
<img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/owner-book.png" alt="" /></p>
      </li>
      <li>Similarly, in Rust, variable bindings can have ownership of what they are bound to.</li>
    </ul>
  </li>
</ul>

<h1 id="three-rules-of-ownership">Three Rules of Ownership</h1>
<p>The following are three rules of ownership:</p>

<h2 id="rule-1">Rule 1</h2>

<p>Each value has a variable binding called its owner.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/ownership-rule1.png" alt="" /></p>

<h2 id="rule-2">Rule 2</h2>

<p>There can only be one owner at a time.</p>

<p><img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/ownership-rule2.png" alt="" /></p>

<h2 id="rule-3">Rule 3</h2>

<ul>
  <li>When an owner goes out of scope, it does not remain accessible.
    <ul>
      <li>When the variable goes out of scope, Rust calls function drop automatically at the closing curly bracket (to deallocate the memory).
  <img src="https://raw.githubusercontent.com/sangam14/RustLabs/master/img/ownership-rule3.png" alt="" /></li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> fn main() {

  let a = 1; // variable a is the owner of the value 1

  let b = 1; // variable b is the owner of the value 1

  let c = 3; // variable c is the owner of the value 3

  

  println!("a : {}", a);

  println!("b : {}", b);

  println!("c : {}", c);

}// value a, b, c are out of scope outside this block
 
</code></pre></div></div>
<p>output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a : 1
b : 1
c : 3
 
</code></pre></div></div>

<ul>
  <li>When using the assignment, two situations happen:
    <ul>
      <li>The value gets copied</li>
      <li>The value gets moved</li>
    </ul>
  </li>
</ul>

:ET